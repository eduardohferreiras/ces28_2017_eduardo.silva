package Q4;

import static org.junit.Assert.*;

import org.junit.Test;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.sql.SQLException;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

public class testSuite {

	Sensor sensorDummy;
	Datacenter DCDummy;
	PainelCondutor PCDummy;
	
	@Before
	public void setup()
	{
		sensorDummy = mock(Sensor.class);
		DCDummy= mock(Datacenter.class);
		PCDummy= mock(PainelCondutor.class);
	}
	
	
	//Esse teste equivale ao item 4a)
	@Test
	public void testeDeInicializaçãoDoControladorPTC() {
		ControladorPTC cPTC = new ControladorPTC(sensorDummy,DCDummy,PCDummy);
		assertNotNull(cPTC);
	}

	//Esse teste equivale ao item 4b)
	@Test
	public void testeParaQuandoOTremNãoSeEncontraEmCruzamento()
	{
		//Estamos utilizando um stub (resposta enlatada), para conseguir testar o caso atual.
		when(sensorDummy.isCruzamento()).thenReturn(false);
		
		ControladorPTC cPTC = new ControladorPTC(sensorDummy,DCDummy,PCDummy);
		ControladorPTC cPTCSpy = Mockito.spy(cPTC);
		
		cPTCSpy.run();
		
		Mockito.verify(cPTCSpy).enviaMsgDatacenter(Mockito.any(),Mockito.any());
		Mockito.verify(cPTCSpy,Mockito.times(1)).enviaMsgNormalPainel(Mockito.any(), Mockito.any());
		
	}
}
